// BEGIN: Generate bahnc command line application
plugins {
	id "application"
}
application {
	mainClass.set("de.uniba.swt.dsl.generator.Main")
	applicationDefaultJvmArgs = ["--add-opens","java.base/java.lang=ALL-UNNAMED"]
}
distributions {
	main {
		distributionBaseName = "bahnc"
	}
}
tasks.withType(CreateStartScripts) {
	applicationName = "bahnc"
}
// END

dependencies {
	implementation fileTree('libs') { include '*.jar' }
	implementation 'org.freemarker:freemarker:2.3.31'
	implementation 'com.google.code.gson:gson:2.8.6'

	implementation 'commons-io:commons-io:2.11.0'
	implementation "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	implementation "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
}
configurations {
	mwe2 {
		extendsFrom implementation
	}
}

sourceSets {
	main {
		resources {
            srcDirs "resources"
        }
	}
}

dependencies {
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 "org.eclipse.xtext:xtext-antlr-generator"
}

task generateXtextLanguage(type: JavaExec) {
	mainClass.set("org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher")
	classpath = configurations.mwe2
	inputs.file "src/de/uniba/swt/dsl/GenerateBahn.mwe2"
	inputs.file "src/de/uniba/swt/dsl/Bahn.xtext"
	outputs.dir "src-gen"
	args += "src/de/uniba/swt/dsl/GenerateBahn.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
processResources.dependsOn(generateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]

//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false
