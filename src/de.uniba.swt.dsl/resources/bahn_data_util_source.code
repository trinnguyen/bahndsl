/**
 * Generated by BahnDSL 1.0.4
 */

#include "bahn_data_util.h"

bool bahn_data_util_initialise_config(const char *config_dir) {
    return false;
}

void bahn_data_util_free_config() {}

bool string_equals(const char *str1, const char *str2) {
    return false;
}

void bahn_data_util_init_cached_track_state() {}

void bahn_data_util_free_cached_track_state() {}

int interlocking_table_get_routes(const char *src_signal_id, const char *dst_signal_id, char *route_ids[]) {
    return 0;
}

char *config_get_scalar_string_value(const char *type, const char *id, const char *prop_name) {
    return "";
}

int config_get_scalar_int_value(const char *type, const char *id, const char *prop_name) {
    return 0;
}

float config_get_scalar_float_value(const char *type, const char *id, const char *prop_name) {
    return 0;
}

bool config_get_scalar_bool_value(const char *type, const char *id, const char *prop_name) {
    return false;
}

int config_get_array_string_value(const char *type, const char *id, const char *prop_name, char* data[]) {
    return 0;
}

int config_get_array_float_value(const char *type, const char *id, const char *prop_name, float data[]) {
    return 0;
}

int config_get_array_bool_value(const char *type, const char *id, const char *prop_name, bool data[]) {
    return 0;
}

bool config_set_scalar_string_value(const char *type, const char *id, const char *prop_name, char *value) {
    return false;
}

char *track_state_get_value(const char *id) {
    return "";
}

bool track_state_set_value(const char *id, const char *value) {
    return false;
}

bool is_segment_occupied(const char *id) {
    return false;
}

bool is_type_segment(const char *id) {
    return false;
}

bool is_type_signal(const char *id) {
    return false;
}

int train_state_get_speed(const char *train_id) {
    return 0;
}

bool train_state_set_speed(const char *train_id, int speed) {
    return false;
}

char *config_get_point_position(const char *route_id, const char *point_id) {
    return "";
}

const char *config_get_block_id_of_segment(const char *seg_id) {
    return "";
}

void log_bool(bool value) {}

void log_int(int value) {}

void log_float(float value) {}

void log_string(const char *value) {}