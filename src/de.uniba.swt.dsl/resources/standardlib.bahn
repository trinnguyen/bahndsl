# Names of the commented out schema items conflict with
# the keywords defined in the BahnDSL grammar (Bahn.text)

schema
    route
        id string
        source string
        destination string
        orientation string
        path string[]
        sections string[]
        route_signals string[]
        route_points string[]
        conflicts string[]
        length float
        train string
    end

    segment
        id string
        length float
    end

    reverser
        id string
        cv int
        block string
    end

    signal
        id string
    #   initial string
        type string
    #   aspects string[]
    end

    point
        id string
    #   initial string
        segment string
    end

    peripheral
        id string
        type string
    #   aspects string[]
    end

    train
        id string
        type string
        weight float
        length float
    #   peripherals string[]
    #   calibration int[]
    end

    block
        id string
        main_segments string[]
        is_reversed bool
        direction string
        length float
        limit float
        train_types string[]
        overlaps string[]
        block_signals string[]
    end

    crossing
        id string
        segment string
    end

    composition
        id string
        entry string
        exit string
        block string
        distant string
    end

     signaltype
         id string
#        initial string
#        aspects string[]
     end

    peripherialtype
         id string
#        initial string
#        aspects string[]
    end
end

config
    length
    weight
    type
    segment
    limit
end

signaltypes
    entry # Einfahrsignal
        aspects
            aspect_caution 0x02
            aspect_go 0x01
            aspect_stop 0x00
        end 
        initial aspect_stop
    exit # Ausfahrsignal
        aspects
            aspect_shunt 0x03
            aspect_caution 0x02
            aspect_go 0x01
            aspect_stop 0x00
        end
        initial aspect_stop
    distant # Vorsignal
        aspects
            aspect_caution 0x02
            aspect_go 0x01
            aspect_stop 0x00
        end
        initial aspect_stop
    block # Blocksignal
        aspects
            aspect_go 0x01
            aspect_stop 0x00
        end
        initial aspect_stop
    shunting
        aspects
            aspect_shunt 0x01
            aspect_stop 0x00
        end
        initial aspect_stop
    halt
        aspects
            aspect_stop 0x00
        end
        initial aspect_stop
    platformlight 
        aspects
            high 0x00
            low 0x01
        end 
        initial high
end

# Board peripheral are sent directly to the ports,
# which are active high
peripheraltypes
    onebit
        aspects
            high 0x01
            low 0x00
        end
        initial high
end

def get_shortest_route(string route_ids[]): string
    if route_ids.len > 0
        float min_len = 2147483647
        string result = route_ids[0]
        for string route_id in route_ids
            float length = get config route.length route_id
            if length < min_len
                min_len = length
                result = route_id
            end
        end

        return result
    end

    return ""
end

def get_previous_block(string route_id, string block_id): string
    string block_ids[] = get config route.sections route_id
    if block_ids.len < 2
        return ""
    end

    string pre_block = block_ids[0]
    int i = 1
    while i < block_ids.len
        if block_ids[i] == block_id
            break
        end

        pre_block = block_ids[i]
        i += 1
    end

    return pre_block
end

def get_block(string route_id, string segment_ids[]): string
    if segment_ids.len == 0
        return ""
    end

    # get first segment
    string seg = segment_ids[0]

    # get all blocks and check
    string block_ids[] = get config route.sections route_id
    for string id in block_ids

        # check main segments
        string main_segs[] = get config block.main_segments id
        for string main_seg in main_segs
            if main_seg == seg
                return id
            end
        end
    end

    return ""
end

def is_block_occupied(string block_id): bool
    string main_segs[] = get config block.main_segments block_id
    for string main_seg in main_segs
        if is main_seg occupied
            return true
        end
    end

    string overlaps[] = get config block.overlaps block_id
    for string segment_id in overlaps
        if is segment_id occupied
            return true
        end
    end

    return false
end

def is_composition_signal(string id): bool
    return get config composition.id id == id
end