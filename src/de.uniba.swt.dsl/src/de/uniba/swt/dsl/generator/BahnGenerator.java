/*
 *
 * Copyright (C) 2020 University of Bamberg, Software Technologies Research Group
 * <https://www.uni-bamberg.de/>, <http://www.swt-bamberg.de/>
 *
 * This file is part of the BahnDSL project, a domain-specific language
 * for configuring and modelling model railways.
 *
 * BahnDSL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * BahnDSL is a RESEARCH PROTOTYPE and distributed WITHOUT ANY WARRANTY, without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 *
 * The following people contributed to the conception and realization of the
 * present BahnDSL (in alphabetic order by surname):
 *
 * - Tri Nguyen <https://github.com/trinnguyen>
 *
 */

/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.dsl.generator;

import de.uniba.swt.dsl.bahn.BahnModel;
import de.uniba.swt.dsl.bahn.FuncDecl;
import de.uniba.swt.dsl.common.generator.sccharts.SCChartsGenerator;
import de.uniba.swt.dsl.common.generator.yaml.YamlConfigGenerator;
import de.uniba.swt.dsl.common.util.BahnUtil;
import de.uniba.swt.dsl.normalization.BahnNormalizationProvider;
import de.uniba.swt.dsl.validation.validators.SwtBahnFuncValidator;
import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import com.google.inject.Inject;

import de.uniba.swt.dsl.common.layout.LayoutGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class BahnGenerator extends AbstractGenerator {

	private static final Logger logger = Logger.getLogger(BahnGenerator.class);

	@Inject
	BahnNormalizationProvider normalizationProvider;

	@Inject
	YamlConfigGenerator yamlConfigGenerator;

	@Inject
	SCChartsGenerator scChartsGenerator;
	
	@Inject
	LayoutGenerator layoutGenerator;

	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var bahnModel = BahnUtil.getBahnModel(resource);
		if (bahnModel == null)
			return;

		String genRouteType = BahnUtil.getRouteType(resource);
		if (genRouteType == null)
			return;

		// layout generator must run first to generate network layout
		layoutGenerator.generate(fsa, bahnModel);

		// use network layout for block generation (direction, signals)
		yamlConfigGenerator.setNetworkLayout(layoutGenerator.getNetworkLayout());
		yamlConfigGenerator.generate(fsa, bahnModel);

		// sccharts
		boolean shouldGenerateSCCharts = checkInterlockingFunctions(bahnModel, false);
		if (shouldGenerateSCCharts) {
			// normalize
			normalizationProvider.normalize(BahnUtil.getDecls(resource.getResourceSet()));

			// generate
			scChartsGenerator.generate(fsa, bahnModel);
		} else {
			logger.info("Missing function for requesting route. SCCharts code generation is skipped.");
		}
	}

	private static boolean checkInterlockingFunctions(BahnModel bahnModel, boolean normalized) {
		var result = SwtBahnFuncValidator.hasRequestAndDriveRoute(bahnModel, normalized);
		if (!result.getFirst()) {
			logger.warn("Missing function for requesting route");
			return false;
		}

		if (!result.getSecond() && bahnModel.getComponents() != null) {
			logger.warn("Adding empty driving route function");
			FuncDecl decl = SwtBahnFuncValidator.generateDriveRouteFuncDecl(normalized);
			bahnModel.getComponents().add(decl);
		}

		return true;
	}
}
