{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Bahn",
	"patterns": [
		{
			"include": "#types"
		},
		{
			"include": "#constants-numeric"
		},
		{
			"include": "#constants-language"
		},
		{
			"include": "#standardlib-schema"
		},
		{
			"include": "#resources"
		},
		{
			"include": "#behaviour"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"types": {
			"patterns": [{
				"name": "storage.type.bahn",
				"match": "\\b(bool|float|int|string)\\b|(?<=[0-9])(m\\/s|km\\/h)\\b|(?<=[0-9])(cm|m|km|g|kg|t)\\b"
			}]
		},
		"constants-numeric": {
			"patterns": [{
				"name": "constant.numeric.bahn",
				"match": "\\b(0x[a-fA-F0-9]+\\b|[0-9]+(.[0-9]+)?)"
			}]
		},
		"constants-language": {
			"patterns": [{
				"name": "constant.language.bahn",
				"match": "\\b(true|false|len)\\b"
			}]
		},
		"standardlib-schema": {
			"patterns": [{
				"name": "support.variable.bahn",
				"match": "\\b(aspects|schema|signaltypes|peripheraltypes|route.(id|source|destination|orientation|path|sections|route_signals|route_segments|conflicts|route_points|length|train)|segment.(id|length)|signal.(id|type)|point.(id|segment)|peripheral.(id|type)|train.(id|type|weight|length)|block.(id|segment|is_reversed|direction|length|limit|train_types|overlaps|block_signals)|crossing.(id|segment)|composition.(id|entry|exit|block|distant))\\b"
			}]
		},
		"resources": {
			"patterns": [{
				"name": "keyword.control.bahn",
				"match": "\\b(bit|blocks|boards|calibration|cargo|composite|crossings|down|features|initial|layout|main|module|overlap|passenger|peripherals|platforms|points|segment|segments|reversers|side|signals|speed|stem|steps|straight|trains|up|length|weight|type|limit)\\b"
			}]
		},
		"behaviour": {
			"patterns": [{
				"name": "keyword.control.bahn",
				"match": "\\b(available|break|caution|go|shunt|config|def|else|end|extern|for|from|get|grant|if|in|is|normal|not|occupied|a_segment|a_signal|position|return|reverse|reversed|routes|set|speed|state|stop|to|while)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.bahn",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.bahn",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"name": "comment.line.double-dash.bahn",
			"begin": "#",
			"end": "$\n?"
		}
	},
	"scopeName": "source.bahn"
}